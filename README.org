#+TITLE: Keystore Mode
#+OPTIONS: toc:2

A major mode for viewing and managing (java) keystores in Emacs.

* Prerequisites

This mode uses the =keytool= command, which comes with OpenJDK JRE.
Make sure it is installed and available on the PATH.

* Usage

Open a keystore with =M-x list-keytool=. After selecting the keystore file, you're
asked to enter the keystore password. This password is stored in a buffer local
variable. It is recommended to kill the buffer (bound to =q=) directly after
you're done with the keystore.

#+CAPTION: Screenshot of list-keystore
#+NAME:    fig:list-keystore
[[../assets/list-keystore.png?raw=true]]

The mode defines the following keybindings:

| Key  | Command                     | Description                                                           |
|------+-----------------------------+-----------------------------------------------------------------------|
| =d=  | keystore-toggle-mark-delete | Mark or unmark entry under point for deletion                         |
| =x=  | keystore-execute            | Execute marked changes (deletes) guarded by =y-or-n-p=                |
| =c=  | keystore-changealias        | Change alias for entry under point using =keytool -changealias=       |
| =e=  | keystore-exportcert         | Export certificate for entry under point using =keytool -exportcert=  |
| =p=  | keystore-printcert          | Create new buffer with certificate defailt using =keytool -printcert= |
| =ib= | keystore-importcert-buffer  | Import certificate from buffer using =keytool -importcert=            |
| =if= | keystore-importcert-file    | Import certificate from file using =keytool -importcert=              |
| =I=  | keystore-importkeystore     | Import a full keystore from file usig =keytool -importkeystore=       |
| =l=  | keystore-list               | Open new buffer with output of =keytool -list=                        |
| =r=  | keystore-list-rfc           | Open new buffer with output of =keytool -list -rfc=                   |
| =s=  | keystore-certreq            | Generate a CSR file for key under point with =keytool -certreq=       |
| =S=  | keystore-gencert            | Generate a certificate for CSR file with =keytool -gencert=           |
| =v=  | keystore-list-verbose       | Open new buffer with output of =keytool -list -v=                     |
| =q=  | kill-this-buffer            | Kill the buffer and any local variables                               |

The =keystore-list-rfc= command opens a buffer where the certificates are folded (using [[https://github.com/gregsexton/origami.el][origami.el]]).
The folding can be toggled with the =<TAB>= key.

* Installation
** straight-use-package

#+CAPTION: init.el configuration with use-package and straight
#+BEGIN_SRC emacs-lisp
(use-package keystore-mode
  :straight
  (keystore-mode
   :type git
   :host github
   :repo "peterpaul/keystore-mode"))
#+END_SRC

** quelpa-use-package

#+CAPTION: init.el configuration with quelpa-use-package
#+BEGIN_SRC emacs-lisp
(use-package keystore-mode
  :quelpa
  (keystore-mode
   :fetcher github
   :repo "peterpaul/keystore-mode"))
#+END_SRC

* Troubleshooting

** Unable to operate on aliases containing (non-ascii) unicode characters.

Make sure that you've configured locales correctly on your system. For example for =UTF-8=:

#+CAPTION: Configure UTF-8 system locale
#+BEGIN_SRC sh
sudo update-locale LC_ALL=en_US.UTF-8
#+END_SRC

* Future ideas

- [ ] Add support for =openssl= and make it a more generic/versatile keystore/certificate management tool.
- [ ] Backup the keystore before making changes to it.

* Development

The testsuite can be run with the following command:

#+CAPTION: Run tests
#+BEGIN_SRC sh
cask exec ecukes
#+END_SRC
