#+TITLE: Keystore Mode
#+OPTIONS: toc:2

#+BEGIN_HTML
<a href='https://travis-ci.com/peterpaul/keystore-mode'>
<img src='https://travis-ci.com/peterpaul/keystore-mode.svg?branch=master' alt='Build Status' />
</a>
<a href='https://coveralls.io/github/peterpaul/keystore-mode?branch=master'>
<img src='https://coveralls.io/repos/github/peterpaul/keystore-mode/badge.svg?branch=master' alt='Coverage Status' />
</a>
<a href='https://opensource.org/licenses/MIT'>
<img src='https://img.shields.io/github/license/peterpaul/keystore-mode.svg' alt='License: MIT' />
</a>
<a href='https://melpa.org/#/keystore-mode'>
<img src='https://melpa.org/packages/keystore-mode-badge.svg' alt='MELPA' />
</a>
#+END_HTML

A major mode for viewing and managing (java) keystores in Emacs.

#+CAPTION: Screenshot of keystore-visit
#+NAME:    fig:keystore-visit
[[../assets/list-keystore.png?raw=true]]

* Prerequisites

This mode uses the =keytool= command, which comes with OpenJDK JRE.
Make sure it is installed and available on the PATH.

* Installation

The package =keystore-mode= is available on the [[https://melpa.org/#/keystore-mode][MELPA]] repository.
After MELPA is setup, as explained [[https://melpa.org/#/getting-started][here]] it can be installed with

    : M-x package-install RET keystore-mode RET

Or alternatively using [[https://github.com/jwiegley/use-package][use-package]] in your =init.el=

#+CAPTION: init.el configuration with use-package
#+BEGIN_SRC emacs-lisp
(use-package keystore-mode)
#+END_SRC

* Usage

There are several ways to open a buffer in =keystore-mode=.

** Creating a new keystore

Create a new keystore with =M-x keystore-genkeypair=. This command will prompt
the user for certificate parameters. After the key and the certificate are
generated, the keystore is displayed in a new buffer with =keystore-mode=.

Or you can create an empty keystore with =M-x keystore-empty=. This command
will prompt for a keystore filename and a keystore password (twice), and
create that keystore. By default it will not overwrite existing files, this
behaviour can be overridden with the universal argument, i.e.
=C-u M-x keystore-empty=.

** Opening an existing keystore

Open an existing keystore with =M-x keystore-visit=. After selecting the keystore
file, you're asked to enter the keystore password. This password is stored in a
buffer local variable. It is recommended to kill the buffer (bound to =q=)
directly after you're done with the keystore.

* Backups

Following [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Backup.html][emacs' philosophy]], a backup of the keystore is created before any
command is executed that modifies the keystore. In contrast to _normal_
buffers, this is being done by the =backup-buffer= function because all
keystore modifications are performed on the file system by the =keytool=
command, and not on the contents of the buffer itself.

As a consequence the backups will be created following customizations of the
=backup= group, however hooks like =before-save-hook= and =after-save-hook=
are not executed. So customizations based on those hooks (f.e. like proposed
[[https://www.emacswiki.org/emacs/ForceBackups][on the wiki]]) will not have any effect here.

* Key bindings

The mode defines the following keybindings:

| Key  | Command                     | Description                                                                     |
|------+-----------------------------+---------------------------------------------------------------------------------|
| =d=  | keystore-toggle-mark-delete | Mark or unmark entry under point for deletion                                   |
| =x=  | keystore-execute            | Execute marked changes (deletes) guarded by =y-or-n-p=                          |
| =c=  | keystore-changealias        | Change alias for entry under point using =keytool -changealias=                 |
| =e=  | keystore-exportcert         | Export certificate for entry under point using =keytool -exportcert=            |
| =g=  | keystore-list-genkeypair    | Generate a new key pair with self-signed certifiate using =keytool -genkeypair= |
| =p=  | keystore-printcert          | Create new buffer with certificate defailt using =keytool -printcert=           |
| =ib= | keystore-importcert-buffer  | Import certificate from buffer using =keytool -importcert=                      |
| =if= | keystore-importcert-file    | Import certificate from file using =keytool -importcert=                        |
| =I=  | keystore-importkeystore     | Import a full keystore from file usig =keytool -importkeystore=                 |
| =l=  | keystore-list               | Open new buffer with output of =keytool -list=                                  |
| =r=  | keystore-list-rfc           | Open new buffer with output of =keytool -list -rfc=                             |
| =s=  | keystore-certreq            | Generate a CSR file for key under point with =keytool -certreq=                 |
| =S=  | keystore-gencert            | Generate a certificate for CSR file with =keytool -gencert=                     |
| =v=  | keystore-list-verbose       | Open new buffer with output of =keytool -list -v=                               |
| =q=  | kill-this-buffer            | Kill the buffer and any local variables                                         |

The =keystore-list-rfc= command opens a buffer where the certificates are folded (using [[https://github.com/gregsexton/origami.el][origami.el]]).
The folding can be toggled with the =<TAB>= key.

* Troubleshooting

** Unable to operate on aliases containing (non-ascii) unicode characters.

Make sure that you've configured locales correctly on your system. For example for =UTF-8=:

#+CAPTION: Configure UTF-8 system locale
#+BEGIN_SRC sh
sudo update-locale LC_ALL=en_US.UTF-8
#+END_SRC

* Future ideas/TODOs

- [ ] Add support for =openssl= and make it a more generic/versatile keystore/certificate management tool.
- [X] Backup the keystore before making changes to it.
- [ ] Detect incorrect entered keystore passwords, and re-prompt the user.
- [ ] Currently generated keys get the keystore password, allow setting other passwords on keys.
- [X] Use =call-process= or =process-file= to invoke =keytool=

* Contributing

I am open to any kind of feedback via issues.

For bug-fixes and/or new features, open a pull-request. Please create or update
testcases for your changes, and make sure to add yourself to the =AUTHORS= file.

* Development

This repository provides a [[https://github.com/cask/cask][Caskfile]] for development purposes.

Tests are created with [[https://github.com/ecukes/ecukes][ecukes]].
The testsuite can be run with the following command:

#+CAPTION: Run tests
#+BEGIN_SRC sh
cask exec ecukes
#+END_SRC
